;====================================================================
; Main.asm file generated by New Project wizard
; Processor: ATmega128
; Compiler:  AVRASM (Proteus)
;====================================================================
;***** Выполнение лабораторной работы №5, вариант №7 (про азбуку Морзе) 
; работа с прерываниями
.include "m128def.inc"
.device ATmega128
.def	temp	=	r16
.def	digit	=	r17 
.def	initflag=	r18
.def	frames  = 	r19

.def	b       =	r20
.def	c		=	r21
.def    f       =	r22

.def	lastDigit =	r5
.def 	framesMax = r6
.def    clrflag   = r7

.equ    t0const  	= 0
.equ    t2const  	= 217
.equ    framescount = 8
        
		
;***** Инициализация
.org $0000
RESET: jmp start
.org $0014
jmp T2_ovf
.org $0020
jmp T0_ovf
.org $0022
jmp iSPI_transmit


.org $0046
;начало обработчика прерывания по переполнению таймера-счетчика 0
T0_ovf: 
	push temp
	in temp, SREG
	push temp
	
	; установить начальное значение TCNT0
	ldi temp, t0const
	out TCNT0, temp
	
	; установить указатель на начало массива данных
	mov YL, XL
	mov YH, XH
	
	clr frames
	ldi digit, 0x01
	
	pop temp
	out SREG, temp
	pop Temp
reti


;начало обработчика прерывания по переполнению таймера-счетчика 2
T2_ovf:
	push temp
	in temp, SREG
	push temp
	
	; установить начальное значение TCNT2
	ldi temp, t2const
	out TCNT2, temp

	sbis PINA, PA0
	jmp SOS
	sbis PINA, PA1
	jmp Gureev
	sbis PINA, PA2
	jmp Kisurin
	sbis PINA, PA3
	jmp birthday
	jmp default
	
	birthday:
	ldi ZL, Low(msg_Birthday_SRAM) 
	ldi ZH, High(msg_Birthday_SRAM)
	jmp adradd
	
	Kisurin:
	ldi ZL, Low(msg_Kisurin_SRAM) 
	ldi ZH, High(msg_Kisurin_SRAM)
	jmp adradd
	
	Gureev:
	ldi ZL, Low(msg_Gureev_SRAM) 
	ldi ZH, High(msg_Gureev_SRAM)
	jmp adradd
	
	SOS:
	ldi ZL, Low(msg_SOS_SRAM) 
	ldi ZH, High(msg_SOS_SRAM)
	
	adradd:
	mov XL, ZL
	mov XH, ZH
	mov YL, ZL
	mov YH, ZH
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	
	ldi temp, t0const
	out TCNT0, temp
	clr frames
	ldi digit, 0x01
	ldi initflag, 0x01
	
	default:
	cpi initflag, 0x00
	breq exit_t2_intr
	
	cpse ZH, YH
	jmp cont
	cpse ZL, YL
	jmp cont
	jmp exit_t2_intr
	cont:
	
	cpse c, clrflag
	jmp transmit
	ldi temp, 0xff
	out SPDR, temp
	nop
	nop
	nop
	inc b
	in temp, SPCR
	ori temp, (1<<SPIE)
	out SPCR, temp
	jmp exit_t2_intr
	
	transmit:
	mov temp, digit
	com temp
	out SPDR, temp
	nop
	nop
	nop
	inc b
	in temp, SPCR
	ori temp, (1<<SPIE)
	out SPCR, temp
	
	cpse digit, lastDigit
	jmp shift
	jmp last_eq
	
	shift:
	lsl digit
	jmp exit_t2_intr
	
	last_eq:
	ldi digit, 0x01
	ldi f, 0x01 ; подъём флага означает, что вывод одного "состояния" строки завершён
	
	exit_t2_intr:
	pop temp
	out SREG, temp
	pop temp
reti


;начало обработчика прерывания по завершению процесса приема/передачи данных в блоке SPI
iSPI_transmit:
	push temp
	in temp, SREG
	push temp
	
	cpi b, 1
	breq second_byte
	cpi b, 2
	breq third_byte
	cpi b, 3
	breq issue_data
	
	second_byte:
	third_byte:
		cpse c, clrflag
		jmp transport
		ldi temp, 0x00
		out SPDR, temp
		nop
		nop
		nop
		inc b
		jmp exit_spi_intr
		
		transport:
		ld temp, Y+
		out SPDR, temp
		nop
		nop
		nop
		inc b
		jmp exit_spi_intr
		
	issue_data:
		sbi PORTB, PB6 ; ST_CP = 1
		cbi PORTB, PB6 ; ST_CP = 0
		
		in temp, SPCR
		andi temp, 0x7F;~(1<<SPIE)
		out SPCR, temp
		
		clr b
		cpse c, clrflag
		jmp check_end
		jmp skip_check
		
		check_end:
		cpi f, 0x01
		breq check_frames
		jmp skip_check
		
		check_frames:
		clr f
		inc frames
		cpse frames, framesMax
		jmp state_again
		clr frames
		jmp skip_check
		state_again:
		sbiw YL:YH, 16
		
		skip_check:
		com c
		
	exit_spi_intr:
		pop temp
		out SREG, temp
		pop temp
reti


start:
; инициализировать стек
	ldi temp, high(RAMEND)
	out sph, temp
	ldi temp, low(RAMEND)
	out spl, temp

	ldi temp, 0x00
	out DDRA, temp
	ser temp
	out PORTA, temp
		
	ldi temp, 0xc7 ;установить Temp = $c7 
	out DDRB, temp ;PORTB [7,6,2,1,0] на выход, остальные на вход
	ser temp
	out PORTB, Temp ;Инициализировать PORTB = $FF
	cbi PORTB, PB6 ;ST_CP = 0
	cbi PORTB, PB7 ;#MR= 0
	sbi PORTB, PB7 ;#MR = 1
	
	;очистка ОП (для упрощения отладки)
	ldi XL, Low(msg_SOS_SRAM) 
	ldi XH, High(msg_SOS_SRAM)
	call CLEAR_ARRAY
	ldi XL, Low(msg_Gureev_SRAM) 
	ldi XH, High(msg_Gureev_SRAM)
	call CLEAR_ARRAY
	ldi XL, Low(msg_Kisurin_SRAM) 
	ldi XH, High(msg_Kisurin_SRAM)
	call CLEAR_ARRAY
	ldi XL, Low(msg_Birthday_SRAM) 
	ldi XH, High(msg_Birthday_SRAM)
	call CLEAR_ARRAY
	
	;загрузка в ОП массивов данных
	ldi XL, Low(msg_SOS_SRAM) 
	ldi XH, High(msg_SOS_SRAM)
	ldi ZL, Low(msg_SOS_FLASH*2) 
	ldi ZH, High(msg_SOS_FLASH*2)
	call COPY_ARRAY
	ldi XL, Low(msg_Gureev_SRAM) 
	ldi XH, High(msg_Gureev_SRAM)
	ldi ZL, Low(msg_Gureev_FLASH*2) 
	ldi ZH, High(msg_Gureev_FLASH*2)
	call COPY_ARRAY
	ldi XL, Low(msg_Kisurin_SRAM) 
	ldi XH, High(msg_Kisurin_SRAM)
	ldi ZL, Low(msg_Kisurin_FLASH*2) 
	ldi ZH, High(msg_Kisurin_FLASH*2)
	call COPY_ARRAY
	ldi XL, Low(msg_Birthday_SRAM) 
	ldi XH, High(msg_Birthday_SRAM)
	ldi ZL, Low(msg_Birthday_FLASH*2) 
	ldi ZH, High(msg_Birthday_FLASH*2)
	call COPY_ARRAY
	
	;начальная инициализация служебных флагов и регистров
	ldi initflag, 0x00
	ldi digit, 0x01 ;регистр, активирующий разряд (выбор разряда будет осуществляться за счёт сдвига этого регистра влево - lsl)
	clr frames
	ldi temp, 0x80
	mov lastDigit, temp
	ldi temp, framescount
	mov framesMax, temp
	ldi temp, 0xff
	mov clrflag, temp
	
	ldi b, 0x00
	ldi c, 0xff
	ldi f, 0x00
	
	;настройка блока SPI
	ldi temp,(1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(0<<SPR0) ; f/2
	out SPCR, temp
	ldi temp, (1<<SPI2X)
	out SPSR, temp

	;настройка таймера 0
	in Temp, ASSR ;тактирование T0 - от внешнего кварцевого резонатора
	sbr Temp, (1<<AS0)
	out ASSR, Temp
	ldi temp, t0const ;Установка начального значения регистра TCNT0
	out TCNT0, temp
	ldi temp, (0<<FOC0)+(0<<COM01)+(0<<COM00)+(0<<WGM01)+(0<<WGM00)+(1<<CS02)+(1<<CS01)+(1<<CS00); f/1024 
	out TCCR0, temp
	; в результате таймер-счетчик 0 настроен в 
	; нормальный режим счета и тут же начинает считать!!!
	
	;настройка таймера 2 
	ldi temp, t2const ;Установка начального значения регистра TCNT2
	out TCNT2, temp
	ldi temp, (0<<FOC2)+(0<<COM21)+(0<<COM20)+(0<<WGM21)+(0<<WGM20)+(0<<CS22)+(1<<CS21)+(1<<CS20); выбор делителя частоты (f/64)
	;ldi temp, (0<<FOC2)+(0<<COM21)+(0<<COM20)+(0<<WGM21)+(0<<WGM20)+(1<<CS22)+(0<<CS21)+(0<<CS20); выбор делителя частоты (f/256)
	out TCCR2, temp ; в результате таймер-счетчик 2 настроен в 
	; нормальный режим счета и тут же начинает считать!!!! 
	
	; Предварительная очистка возможного запроса прерывания для обоих таймеров
	in temp, TIFR
	ori temp, (1<<TOV0)
	ori temp, (1<<TOV2)
	out TIFR, temp
	; Разрешение запроса прерывания по переполнению для обоих таймеров
	ldi temp, 0x41
	out TIMSK, temp
	
	sei; Глобальное разрешение любых прерываний
	; бесконечный пустой цикл (конец работы основного тела программы)
	quit: rjmp	quit		           


;отладочная подпрограмма для очистки ОП перед копированием в SRAM массивов данных
COPY_ARRAY:
	push ZH
	push ZL
	push XH
	push XL
	ldi temp, 255
	move_data:
		lpm 
		st X+, r0
		adiw ZL, 1
		dec temp
		brne move_data
	lpm
	st X+, r0
	adiw ZL, 1
	pop XL
	pop XH
	pop ZL
	pop ZH
ret

;подпрограмма переноса данных из FLASH в SRAM
CLEAR_ARRAY:
	push XH
	push XL
	push f
	ldi temp, 255
	ldi f, 0xff
	clear:
		st X+, f
		dec temp
		brne clear
	st X+, f
	pop f
	pop XL
	pop XH
ret


; Область данных
.dseg ; SRAM
.org 0x100
; резервировать 256 байт в области внутренней памяти данных, начиная с адреса 0x100 для каждого сообщения
msg_SOS_SRAM: .BYTE 256
msg_Gureev_SRAM: .BYTE 256
msg_Kisurin_SRAM: .BYTE 256
msg_Birthday_SRAM: .BYTE 256

.cseg ; FLASH
; Представить в области памяти программ коды изображения, задающие требуемые сообщения
msg_SOS_FLASH: .dw 	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x88bb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88bb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x88bb,0x00ff,0x88bb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
msg_Gureev_FLASH: .dw 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4040,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xc060,0x4040,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x0000,0x0000,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x0000,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x0000,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0x0000,0x0000,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x08fb,0x0078, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x08fb, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
msg_Kisurin_FLASH: .dw  0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0078,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0078,0x0000,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x0000,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0078,0x8870,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0078,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
msg_Birthday_FLASH: .dw 0x8877,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x8877,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x0000,0x0000,0x0000,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x0000,0x0000,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x0000,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
; конец области данных
