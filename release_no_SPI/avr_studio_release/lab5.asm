;====================================================================
; Main.asm file generated by New Project wizard
; Processor: ATmega128
; Compiler:  AVRASM (Proteus)
;====================================================================
;***** Выполнение лабораторной работы №5, вариант №7 (про азбуку Морзе) 
; работа с прерываниями
.include "m128def.inc"
.device ATmega128
.def	temp	   = r16
.def	clrdigit   = r17
.def	digit 	   = r18 
.def	initflag   = r19
.def	frames     = r20
.def	higd       = r21
.def	lowd       = r22

.def	lastDigit  = r5
.def 	frconst	   = r6

.equ   t0const  = 0

.equ   t2const  = 178

.equ 	fr = 8
        
		
;***** Инициализация
.org $0000
RESET: jmp start
.org $0014
jmp T2_ovf
.org $0020
jmp T0_ovf


.org $0046
;начало обработчика прерывания по переполнению таймера-счетчика 0
T0_ovf: 
	push temp
	in temp, SREG
	push temp
	
	; установить начальное значение TCNT0
	ldi temp, t0const
	out TCNT0, temp
	
	mov YL, XL
	mov YH, XH
	
	clr frames
	ldi digit, 0x01
	
	pop temp
	out SREG, temp
	pop Temp
reti


;начало обработчика прерывания по переполнению таймера-счетчика 2
T2_ovf:
	push temp
	in temp, SREG
	push temp
	
	; установить начальное значение TCNT2
	ldi temp, t2const
	out TCNT2, temp

	sbis PINA, PA0
	jmp SOS
	sbis PINA, PA1
	jmp Gureev
	sbis PINA, PA2
	jmp Kisurin
	sbis PINA, PA3
	jmp birthday
	jmp default
	
	birthday:
	ldi ZL, Low(msg_Birthday_SRAM) 
	ldi ZH, High(msg_Birthday_SRAM)
	jmp adradd
	
	Kisurin:
	ldi ZL, Low(msg_Kisurin_SRAM) 
	ldi ZH, High(msg_Kisurin_SRAM)
	jmp adradd
	
	Gureev:
	ldi ZL, Low(msg_Gureev_SRAM) 
	ldi ZH, High(msg_Gureev_SRAM)
	jmp adradd
	
	SOS:
	ldi ZL, Low(msg_SOS_SRAM) 
	ldi ZH, High(msg_SOS_SRAM)
	
	adradd:
	mov XL, ZL
	mov XH, ZH
	mov YL, ZL
	mov YH, ZH
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	adiw ZL:ZH, 63
	adiw ZL:ZH, 1
	
	ldi temp, t0const
	out TCNT0, temp
	clr frames
	ldi digit, 0x01
	ldi initflag, 0x01
	
	default:
	cpi initflag, 0x00
	breq exit_t2_intr
	
	cpse ZH, YH
	jmp cont
	cpse ZL, YL
	jmp cont
	jmp exit_t2_intr
	cont:
	
	ldi temp, 0xff
	out PORTE, temp
	mov temp, digit
	com temp
	out PORTE, temp
	
	ldi temp, 0x00
	out PORTC, temp
	out PORTD, temp
	cbi PORTA, PA4

	ld temp, Y+
	mov higd, temp
	out PORTC, temp
	ld temp, Y+
	mov lowd, temp
	out PORTD, temp
	
	cpi higd, 0x88
	breq a1
	cpi higd, 0x00
	breq a2
	jmp mark
	
	a2:
	cpi lowd, 0x0c
	breq set_ds
	jmp mark
	
	a1:
	cpi lowd, 0xfb
	breq set_ds
	jmp mark	
	
	set_ds:
	sbi PORTA, PA4
	
	mark:
	
	cpse digit, lastDigit
	jmp shift
	jmp last_eq
	
	shift:
	lsl digit
	jmp exit_t2_intr
	
	last_eq:
	ldi digit, 0x01
	inc frames
	cpse frames, frconst
	jmp m1
	clr frames
	jmp exit_t2_intr
	m1:
	sbiw YL:YH, 16
	exit_t2_intr:
	pop temp
	out SREG, temp
	pop temp
reti


start:
; инициализировать стек
	ldi temp, high(RAMEND)
	out sph, temp
	ldi temp, low(RAMEND)
	out spl, temp

	ldi temp, 0xf0
	out DDRA, temp
	ldi temp, 0x0f
	out PORTA, temp
	
	; направление портов C, D, E - на выход
	ldi temp, 0xff
	out DDRC, temp
	out DDRD, temp
	out DDRE, temp
	
	;начальная инициализация портов E, C, D 
	;(все разряды индикатора погашены, нет активных сегментов)
	out PORTE, temp
	clr temp
	out PORTC, temp
	out PORTD, temp
	
	;очистка ОП (для упрощения отладки)
	ldi XL, Low(msg_SOS_SRAM) 
	ldi XH, High(msg_SOS_SRAM)
	call CLEAR_ARRAY
	ldi XL, Low(msg_Gureev_SRAM) 
	ldi XH, High(msg_Gureev_SRAM)
	call CLEAR_ARRAY
	ldi XL, Low(msg_Kisurin_SRAM) 
	ldi XH, High(msg_Kisurin_SRAM)
	call CLEAR_ARRAY
	ldi XL, Low(msg_Birthday_SRAM) 
	ldi XH, High(msg_Birthday_SRAM)
	call CLEAR_ARRAY
	
	;загрузка в ОП массивов данных
	ldi XL, Low(msg_SOS_SRAM) 
	ldi XH, High(msg_SOS_SRAM)
	ldi ZL, Low(msg_SOS_FLASH*2) 
	ldi ZH, High(msg_SOS_FLASH*2)
	call COPY_ARRAY
	ldi XL, Low(msg_Gureev_SRAM) 
	ldi XH, High(msg_Gureev_SRAM)
	ldi ZL, Low(msg_Gureev_FLASH*2) 
	ldi ZH, High(msg_Gureev_FLASH*2)
	call COPY_ARRAY
	ldi XL, Low(msg_Kisurin_SRAM) 
	ldi XH, High(msg_Kisurin_SRAM)
	ldi ZL, Low(msg_Kisurin_FLASH*2) 
	ldi ZH, High(msg_Kisurin_FLASH*2)
	call COPY_ARRAY
	ldi XL, Low(msg_Birthday_SRAM) 
	ldi XH, High(msg_Birthday_SRAM)
	ldi ZL, Low(msg_Birthday_FLASH*2) 
	ldi ZH, High(msg_Birthday_FLASH*2)
	call COPY_ARRAY
	
	;начальная инициализация служебных флагов и регистров
	ldi initflag, 0x00
	ldi digit, 0x01 ;регистр, активирующий разряд (выбор разряда будет осуществляться за счёт сдвига этого регистра влево - lsl)
	clr frames
	ldi temp, 0x80
	mov lastDigit, temp
	ldi temp, fr
	mov frconst, temp

	;настройка таймера 0
	in Temp, ASSR ;тактирование T0 - от внешнего кварцевого резонатора
	sbr Temp, (1<<AS0)
	out ASSR, Temp
	ldi temp, t0const ;Установка начального значения регистра TCNT0
	out TCNT0, temp
	ldi temp, (0<<FOC0)+(0<<COM01)+(0<<COM00)+(0<<WGM01)+(0<<WGM00)+(1<<CS02)+(1<<CS01)+(1<<CS00); f/1024 
	out TCCR0, temp
	; в результате таймер-счетчик 0 настроен в 
	; нормальный режим счета и тут же начинает считать!!!
	
	;настройка таймера 2 
	ldi temp, t2const ;Установка начального значения регистра TCNT2
	out TCNT2, temp
	ldi temp, (0<<FOC2)+(0<<COM21)+(0<<COM20)+(0<<WGM21)+(0<<WGM20)+(0<<CS22)+(1<<CS21)+(1<<CS20); выбор делителя частоты (f/64)
	out TCCR2, temp ; в результате таймер-счетчик 2 настроен в 
	; нормальный режим счета и тут же начинает считать!!!! 
	
	; Предварительная очистка возможного запроса прерывания для обоих таймеров
	in temp, TIFR
	ori temp, (1<<TOV0)
	ori temp, (1<<TOV2)
	out TIFR, temp
	; Разрешение запроса прерывания по переполнению для обоих таймеров
	ldi temp, 0x41
	out TIMSK, temp
	
	sei; Глобальное разрешение любых прерываний
	; бесконечный пустой цикл (конец работы основного тела программы)
	quit: rjmp	quit		           


;отладочная подпрограмма для очистки ОП перед копированием в SRAM массивов данных
COPY_ARRAY:
	push ZH
	push ZL
	push XH
	push XL
	ldi temp, 255
	move_data:
		lpm 
		st X+, r0
		adiw ZL, 1
		dec temp
		brne move_data
	lpm
	st X+, r0
	adiw ZL, 1
	pop XL
	pop XH
	pop ZL
	pop ZH
ret

;подпрограмма переноса данных из FLASH в SRAM
CLEAR_ARRAY:
	push XH
	push XL
	ldi temp, 255
	ldi clrdigit, 0xff
	clear:
		st X+, clrdigit
		dec temp
		brne clear
	st X+, clrdigit
	pop XL
	pop XH
ret


; Область данных
.dseg ; SRAM
.org 0x100
; резервировать 256 байт в области внутренней памяти данных, начиная с адреса 0x100 для каждого сообщения
msg_SOS_SRAM: .BYTE 256
msg_Gureev_SRAM: .BYTE 256
msg_Kisurin_SRAM: .BYTE 256
msg_Birthday_SRAM: .BYTE 256

.cseg ; FLASH
; Представить в области памяти программ коды изображения, задающие требуемые сообщения
msg_SOS_FLASH: .dw 	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x88bb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88bb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x88bb,0x00ff,0x88bb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff,0x88bb, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb,0x00ff, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88bb, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
msg_Gureev_FLASH: .dw 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4040,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xc060,0x4040,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x0000,0x0000,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x0000,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x4040,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0xc060,0x0000,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0xc060,0x0000,0x0000,0x0000,0x0000,0x0000,0x08fb,0x0078,0x8840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x08fb,0x0078, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x08fb, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
msg_Kisurin_FLASH: .dw  0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0000,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x0000,0x0078,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0078,0xa2c0,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0078,0x0000,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x81c0,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0078,0x8870,0x1018,0x0000,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0078,0x8870,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0078,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x94c0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
msg_Birthday_FLASH: .dw 0x8877,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x8877,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x0000,0x0000,0x0000,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x0000,0x0000,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x0000,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x0000,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x8877,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x00ff,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x00ff,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x8877,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x000c,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x88fb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00ff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
; конец области данных